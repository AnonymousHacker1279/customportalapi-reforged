plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'me.modmuss50.mod-publish-plugin' version '0.4.0'
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    generateRunFolders = true
    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
    }
}

mixin {
    add sourceSets.main, "cpapireforged.refmap.json"
    config "cpapireforged.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"
	annotationProcessor "org.spongepowered:mixin:0.8.4:processor"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

publishing {
  repositories {
    maven {
      name = "azurelib"
      url = "https://libs.azuredoom.com:4443/mods"
      credentials(PasswordCredentials)
      authentication {
        basic(BasicAuthentication)
      }
    }
  }
  publications {
    maven(MavenPublication) {
      groupId = project.mod_group_id
      artifactId = project.mod_id
      version = project.mod_version
      from components.java
    }
  }
}

processResources {
	doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

if (file('key.properties').exists()) {
    publishMods {
        def releaseProp = new Properties()
        File secretPropsFile = file("key.properties")
        releaseProp.load(secretPropsFile.newInputStream())
        file = jar.archiveFile
        changelog = rootProject.file("changelog.md").text
        type = STABLE
        modLoaders.add("neoforge")

        curseforge {
            projectId = "902717"
            projectSlug = "custom-portal-api-reforged"
            accessToken = releaseProp.getProperty("curseKey")
            minecraftVersions.add(project.minecraft_version)
        }
        modrinth {
            projectId = "VepYPOdy"
            accessToken = releaseProp.getProperty('modrinthKey')
            minecraftVersions.add(project.minecraft_version)
        }
    }
}
