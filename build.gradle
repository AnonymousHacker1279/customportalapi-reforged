plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.78'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.+'
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

version = mod_version
group = mod_group_id

base {
    archivesName = "${mod_id}-neo-${minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

runs {
    configureEach {
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             neo_version         : neo_version, neo_version_range: neo_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes(['Specification-Title'     : mod_id,
                    'Specification-Vendor'    : mod_authors,
                    'Specification-Version'   : '1', // We are version 1 of ourselves
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_authors,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

publishing {
    repositories {
        maven {
            name = "azurelib"
            url = "https://libs.azuredoom.com:4443/mods"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            artifactId base.archivesName.get()
            artifact jar
        }
    }
}

processResources {
    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

if (file('key.properties').exists()) {
    task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
        def curseProp = new Properties()
        File secretPropsFile = file("key.properties")
        curseProp.load(secretPropsFile.newInputStream())
        apiToken = curseProp.getProperty("curseKey")

        def mainFile = upload("902717", jar)
        mainFile.releaseType = "release"
        mainFile.changelogType = "text"
        mainFile.changelog = file("changelog.txt")
        mainFile.addModLoader("NeoForge")
        mainFile.addJavaVersion("Java 17")
        mainFile.addGameVersion("1.20.4")
    }
}

if (file('key.properties').exists()) {
    modrinth {
        def modrinthProp = new Properties()
        File secretPropsFile = file("key.properties")
        modrinthProp.load(secretPropsFile.newInputStream())
        token = modrinthProp.getProperty('modrinthKey')
        projectId = 'VepYPOdy'
        versionNumber = project.mod_version
        uploadFile = jar
        changelog = rootProject.file("changelog.txt").text
        gameVersions = ['1.20.4']
        loaders = ['neoforge']
    }
}